{
  "name": "My-wallet-v3",
  "tagline": "",
  "body": "# MyWallet [![Build Status](https://travis-ci.org/blockchain/My-Wallet-V3.png?branch=master)](https://travis-ci.org/blockchain/My-Wallet-V3) [![Coverage Status](https://coveralls.io/repos/blockchain/My-Wallet-V3/badge.svg?branch=master&service=github)](https://coveralls.io/github/blockchain/My-Wallet-V3?branch=master)\r\n\r\nJavaScript Model for Blockchain.info wallet.\r\n\r\n## Build\r\n\r\n```sh\r\nnpm install\r\ngrunt build\r\n```\r\n\r\n## Tests\r\n\r\n```sh\r\nnpm test\r\n```\r\n\r\n## Dev\r\n\r\nWatch files and re-build\r\n\r\n```sh\r\ngrunt\r\n```\r\n\r\n## Clean\r\n\r\nClean generated files:\r\n\r\n```sh\r\ngrunt clean\r\n```\r\n\r\n## Getting Started\r\n\r\nLoad `dist/my-wallet.js`.\r\n\r\nOptional: set alias for modules you use\r\n\r\n```javascript\r\nvar MyWallet = Blockchain.MyWallet;\r\nvar WalletStore = Blockchain.WalletStore;\r\nvar Spender = Blockchain.Spender;\r\nvar API = Blockchain.API;\r\n```\r\n\r\nDisable logout, if desired, for development work:\r\n```javascript\r\nMyWallet.disableLogout(true);\r\n\r\n// Set an interval, since logout gets reactived by certain parts of the code\r\nwindow.setInterval(function() { MyWallet.disableLogout(true); }, 60000);\r\n```\r\n\r\n\r\nMy Wallet communicates about its state with user-defined event listeners. Setup a listener like so:\r\n```javascript\r\nfunction myListenerFun(eventName, data) {\r\n    // Handle events\r\n}\r\n\r\n// Register listener function with MyWallet\r\nMyWallet.addEventListener(myListenerFun);\r\n```\r\n\r\nSome events that we need to process:\r\n\r\n| Event Name | Our Action |\r\n| :--- | :--- |\r\n| `did_multiaddr` | Populate wallet statistics on the UI |\r\n| `hd_wallets_does_not_exist` | Create an HD wallet |\r\n| `on_wallet_decrypt_finish` | Get wallet transaction history |\r\n\r\n\r\nTo build an HD wallet with an existing legacy wallet, we must initialize after receiving event notification from MyWallet.\r\n```javascript\r\nvar passphrase = MyWallet.generateHDWalletPassphrase();\r\n\r\nMyWallet.initializeHDWallet(passphrase, null, null, _successFun, _errorFun);\r\n```\r\n\r\n\r\nLoad a wallet from the server, with no 2FA\r\n```javascript\r\nvar guid = \"my-wallet-guid-1234-bcde\";\r\nvar pass = \"wallet-password\";\r\nvar twoFactorCode = null;\r\n\r\nMyWallet.fetchWalletJSON(guid, null, null, pass, twoFactorCode,\r\n    successFun, need2FAfun, wrong2FAfun, otherErrorFun);\r\n\r\n// Do stuff with the wallet\r\nvar LegacyAddresses = MyWallet.getLegacyActiveAddresses();\r\n```\r\n\r\nIn order to fetch the wallet history, make a call to `get_history`:\r\n```javascript\r\nMyWallet.get_history(_successFun, _errorFun);\r\n```\r\n\r\n`get_history` will trigger the `did_multiaddr` event on completion, so the wallet stats and display can be updated.\r\n\r\n## Distribution\r\n\r\nRun `GITHUB_USER=... GITHUB_PASSWORD=... grunt dist` to check all dependencies against `dependency-whitelist.json` and generate `my-wallet.min.js``.\r\n\r\nIf package.json contains a version like \"1.2.*\", the latest version is 1.2.3, but the latest whitelisted version is 1.2.2 then it will use 1.2.2 and show a warning. This also applies to dependencies! Even if you specificy a package version like 1.2.*, if that package depends on an another package and specifies a specific version that's not whitelist, the script will abort.\r\n\r\n## Adding a browserified dependency\r\n\r\n1. `npm install newpackage --save`\r\n2. Add the require where needed\r\n3. `npm install`\r\n\r\n### Whitelist dependencies\r\n\r\n1. Add the tagged version and the commit hash to dependency-whitelist.json.\r\n2. Run `grunt dist`\r\n\r\n## Security\r\n\r\nSecurity issues can be reported to us in the following venues:\r\n * Email: security@blockchain.info\r\n * Bug Bounty: https://www.crowdcurity.com/blockchain-info\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}